// <auto-generated />
using DataDrivenDungeon.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataDrivenDungeon.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20230823211806_Secondary")]
    partial class Secondary
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataDrivenDungeon.Models.Armor", b =>
                {
                    b.Property<int>("ArmorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArmorId"));

                    b.Property<short>("ArmorCost")
                        .HasColumnType("smallint");

                    b.Property<short>("ArmorHealthMax")
                        .HasColumnType("smallint");

                    b.Property<string>("ArmorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArmorId");

                    b.ToTable("Armors");
                });

            modelBuilder.Entity("DataDrivenDungeon.Models.Creature", b =>
                {
                    b.Property<int>("CreatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreatureId"));

                    b.Property<string>("BonusDrop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("BonusDropChance")
                        .HasColumnType("smallint");

                    b.Property<short>("CoinDropMax")
                        .HasColumnType("smallint");

                    b.Property<short>("CoinDropMin")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("DamageMax")
                        .HasColumnType("smallint");

                    b.Property<short>("DamageMin")
                        .HasColumnType("smallint");

                    b.Property<int>("FightInDungeonDungeonId")
                        .HasColumnType("int");

                    b.Property<short>("HealthMax")
                        .HasColumnType("smallint");

                    b.Property<short>("HealthMin")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBoss")
                        .HasColumnType("bit");

                    b.HasKey("CreatureId");

                    b.HasIndex("FightInDungeonDungeonId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("DataDrivenDungeon.Models.Dungeon", b =>
                {
                    b.Property<int>("DungeonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DungeonId"));

                    b.Property<string>("DungeonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("EnemyMinPerFight")
                        .HasColumnType("smallint");

                    b.Property<short>("ExtraEnemyChance")
                        .HasColumnType("smallint");

                    b.Property<short>("FightsBeforeBoss")
                        .HasColumnType("smallint");

                    b.HasKey("DungeonId");

                    b.ToTable("Dungeons");
                });

            modelBuilder.Entity("DataDrivenDungeon.Models.GameData", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<int>("CurrentArmorArmorId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentWeaponWeaponId")
                        .HasColumnType("int");

                    b.Property<int>("HighestDungeonAllowedDungeonId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<short>("PlayerHealth")
                        .HasColumnType("smallint");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("GameId");

                    b.HasIndex("CurrentArmorArmorId");

                    b.HasIndex("CurrentWeaponWeaponId");

                    b.HasIndex("HighestDungeonAllowedDungeonId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("DataDrivenDungeon.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<short>("BankedCoins")
                        .HasColumnType("smallint");

                    b.Property<short>("BankedFireballs")
                        .HasColumnType("smallint");

                    b.Property<short>("BankedPotions")
                        .HasColumnType("smallint");

                    b.Property<short>("Coins")
                        .HasColumnType("smallint");

                    b.Property<short>("Emblems")
                        .HasColumnType("smallint");

                    b.Property<short>("Fireballs")
                        .HasColumnType("smallint");

                    b.Property<short>("Potions")
                        .HasColumnType("smallint");

                    b.HasKey("InventoryId");

                    b.ToTable("GameInventory");
                });

            modelBuilder.Entity("DataDrivenDungeon.Models.Weapon", b =>
                {
                    b.Property<int>("WeaponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeaponId"));

                    b.Property<short>("DamageMax")
                        .HasColumnType("smallint");

                    b.Property<short>("DamageMin")
                        .HasColumnType("smallint");

                    b.Property<short>("WeaponCost")
                        .HasColumnType("smallint");

                    b.Property<string>("WeaponName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeaponId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("DataDrivenDungeon.Models.Creature", b =>
                {
                    b.HasOne("DataDrivenDungeon.Models.Dungeon", "FightInDungeon")
                        .WithMany()
                        .HasForeignKey("FightInDungeonDungeonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FightInDungeon");
                });

            modelBuilder.Entity("DataDrivenDungeon.Models.GameData", b =>
                {
                    b.HasOne("DataDrivenDungeon.Models.Armor", "CurrentArmor")
                        .WithMany()
                        .HasForeignKey("CurrentArmorArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataDrivenDungeon.Models.Weapon", "CurrentWeapon")
                        .WithMany()
                        .HasForeignKey("CurrentWeaponWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataDrivenDungeon.Models.Dungeon", "HighestDungeonAllowed")
                        .WithMany()
                        .HasForeignKey("HighestDungeonAllowedDungeonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentArmor");

                    b.Navigation("CurrentWeapon");

                    b.Navigation("HighestDungeonAllowed");
                });
#pragma warning restore 612, 618
        }
    }
}
